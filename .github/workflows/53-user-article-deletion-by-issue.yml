name: User article deletion by issue
  
on:
  issues:
    types: [opened, edited]
    
jobs:
  user-article-deletion:
    if: contains(github.event.issue.labels.*.name, 'user-article-deletion')
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout main branch
      uses: actions/checkout@v3
      with:
        ref: main
        
    - name: Set env
      id: env
      run: |
        # Env
        USERS_PUBLIC_PATH="public/u"
        USERS_SERVICE_PATH="u"
        USER_META_INFO_FILE_NAME="meta.json"
        
        # Github output
        {
          echo "users_public_path=$USERS_PUBLIC_PATH"
          echo "users_service_path=$USERS_SERVICE_PATH"
          echo "user_meta_info_file_name=$USER_META_INFO_FILE_NAME"
        } >> "$GITHUB_OUTPUT"
        
    - name: Parse issue forms
      id: issue-parser
      uses: edumserrano/github-issue-forms-parser@v1.3.7
      with:
        template-filepath: '.github/ISSUE_TEMPLATE/53-user-article-deletion-by-issue.yml'
        issue-form-body: '${{ github.event.issue.body }}'
        
    - name: Extract user ID and article path from issue body
      env:
        ENV__USERS_PUBLIC_PATH: ${{ steps.env.outputs.users_public_path }}
        ENV__USERS_SERVICE_PATH: ${{ steps.env.outputs.users_service_path }}
        ENV__USER_META_INFO_FILE_NAME: ${{ steps.env.outputs.user_meta_info_file_name }}
        PARSED_ISSUE: ${{ steps.issue-parser.outputs.parsed-issue }}
        ISSUE_NUMBER: ${{ github.event.issue.number }}
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      id: extract
      run: |
        # Extract
        USER_ID=$(echo "$PARSED_ISSUE" | jq -r '.["user-id"]')
        ARTICLE_PATH=$(echo "$PARSED_ISSUE" | jq -r '.["article-path"]')
        
        # User paths & files
        USER_PUBLIC_PATH="$ENV__USERS_PUBLIC_PATH/$USER_ID"
        USER_SERVICE_PATH="$ENV__USERS_SERVICE_PATH/$USER_ID"
        USER_SERVICE_ARTICLE_PATH="$USER_SERVICE_PATH/$ARTICLE_PATH"
        USER_PUBLIC_META_INFO_FILE="$USER_PUBLIC_PATH/$ENV__USER_META_INFO_FILE_NAME"
        USER_PUBLIC_ARTICLE_HTML_FILE="$USER_PUBLIC_PATH/${ARTICLE_PATH}.html"
        USER_SERVICE_ARTICLE_HTML_FILE="$USER_SERVICE_PATH/${ARTICLE_PATH}.html"
        
        # Output
        echo "Extracted USER_ID: $USER_ID"
        echo "Extracted ARTICLE_PATH: $ARTICLE_PATH"
        echo "Extracted USER_ARTICLE_SERVICE_PATH: $USER_SERVICE_ARTICLE_PATH"
        
        echo "User public path: $USER_PUBLIC_PATH"
        echo "User public meta info file: $USER_PUBLIC_META_INFO_FILE"
        echo "User public article html file: $USER_PUBLIC_ARTICLE_HTML_FILE"
        echo "User service article html file: $USER_SERVICE_ARTICLE_HTML_FILE"
        
        # Validation: User ID
        if [[ ! "$USER_ID" =~ ^[a-z0-9][a-z0-9_-]{1,28}[a-z0-9]$ ]]; then
          echo "올바르지 않은 아이디 형식" > comment.md
          gh issue comment "$ISSUE_NUMBER" -F comment.md
          echo "user_id=" >> $GITHUB_OUTPUT
          exit 1
        fi
        
        # Validation: Article path
        validate_segment() {
          SEGMENT="$1"
          echo "SEGMENT: $SEGMENT"
          
          if [[ "$SEGMENT" =~ ^[a-zA-Z0-9](?:[a-zA-Z0-9_-]{0,18}[a-zA-Z0-9])?$ ]]; then
            return 1
          fi
          return 0
        }
        
        IFS='/' read -ra PARTS <<< "$ARTICLE_PATH"
        for SEGMENT in "${PARTS[@]}"; do
          if ! validate_segment "$SEGMENT"; then
            echo "올바르지 않은 작성 글 URL 경로 형식: $SEGMENT" > comment.md
            gh issue comment "$ISSUE_NUMBER" -F comment.md
            echo "article_path=" >> $GITHUB_OUTPUT
            exit 1
          fi
        done
        
        # Github output
        {
          echo "user_id=$USER_ID"
          echo "article_path=$ARTICLE_PATH"
          
          echo "user_public_path=$USER_PUBLIC_PATH"
          echo "user_service_article_path=$USER_SERVICE_ARTICLE_PATH"
          echo "user_public_meta_info_file=$USER_PUBLIC_META_INFO_FILE"
          echo "user_public_article_html_file=$USER_PUBLIC_ARTICLE_HTML_FILE"
          echo "user_service_article_html_file=$USER_SERVICE_ARTICLE_HTML_FILE"
        } >> $GITHUB_OUTPUT
        
    - name: Check if user exists
      env:
        ENV__USER_PUBLIC_PATH: ${{ steps.extract.outputs.user_public_path }}
        USER_ID: ${{ steps.extract.outputs.user_id }}
        ISSUE_NUMBER: ${{ github.event.issue.number }}
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        # Validation: User ID
        if [ ! -d "$ENV__USER_PUBLIC_PATH" ]; then
          echo "존재하지 않는 사용자 아이디: **$USER_ID**" > comment.md
          gh issue comment "$ISSUE_NUMBER" -F comment.md
          exit 1
        fi
        
    - name: Check GitHub user ownership
      env:
        ENV__USER_PUBLIC_META_INFO_FILE: ${{ steps.extract.outputs.user_public_meta_info_file }}
        GITHUB_ID: ${{ github.event.issue.user.id }}
        ISSUE_NUMBER: ${{ github.event.issue.number }}
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        # Validation: User ownership
        GITHUB_ID_META_FILE=$(jq -r '.github_id // empty' "$ENV__USER_PUBLIC_META_INFO_FILE")
        if [ "$GITHUB_ID" != "$GITHUB_ID_META_FILE" ]; then
          echo "권한이 없습니다" > comment.md
          gh issue comment "$ISSUE_NUMBER" -F comment.md
          exit 1
        fi
        
    - name: Setup Git
      run: |
        git config user.name "github-actions[bot]"
        git config user.email "github-actions[bot]@users.noreply.github.com"
          
    - name: Commit and push to main
      env:
        ENV__USER_PUBLIC_ARTICLE_HTML_FILE: ${{ steps.extract.outputs.user_public_article_html_file }}
        USER_ID: ${{ steps.extract.outputs.user_id }}
      id: delete
      run: |
        git checkout main
        git rm "$ENV__USER_PUBLIC_ARTICLE_HTML_FILE" || true
        git commit -m "Delete user article page for $USER_ID" || echo "Nothing to commit"
        git push origin main
        
    - name: Commit and push to cf-pages
      env:
        ENV__USER_SERVICE_ARTICLE_HTML_FILE: ${{ steps.extract.outputs.user_service_article_html_file }}
        ENV__USER_SERVICE_ARTICLE_PATH: ${{ steps.extract.outputs.user_service_article_path }}
      run: |
        git fetch origin cf-pages
        git switch cf-pages || git checkout -b cf-pages
        
        git rm "$ENV__USER_SERVICE_ARTICLE_HTML_FILE" || true
        git commit -m "Delete user article page: $ENV__USER_SERVICE_ARTICLE_PATH" || echo "Nothing to commit"
        git push origin cf-pages
        
    - name: Comment on issue
      env:
        ENV__USER_SERVICE_ARTICLE_PATH: ${{ steps.extract.outputs.user_service_article_path }}
        USER_ID: ${{ steps.extract.outputs.user_id }}
        ARTICLE_PATH: ${{ steps.extract.outputs.article_path }}
        REPO_NAME: ${{ github.event.repository.name }}
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        echo "사용자 **$USER_ID**의 등록된 작성 글 **$ARTICLE_PATH** 삭제 완료: [$REPO_NAME/$ENV__USER_SERVICE_ARTICLE_PATH](https://$REPO_NAME/$ENV__USER_SERVICE_ARTICLE_PATH)" > comment.md
        gh issue comment ${{ github.event.issue.number }} -F comment.md
